{"version":3,"sources":["js/actions/index.js","js/constants/action-types.js","js/components/Options.js","js/components/Pixel.js","js/components/Canvas.js","js/components/Color.js","js/components/ColorPalette.js","js/components/Controls.js","App.js","serviceWorker.js","js/reducers/index.js","js/store/index.js","js/common/localStorage.js","index.js"],"names":["addPixel","pixel","type","id","uuid","color","index","deletePixel","updatePixel","updateEditorColor","Options","handleColumnChange","bind","handleRowChange","handlePixelSizeChange","handleHidePixelGrid","handleColorChange","event","newColumnCount","target","value","columnDifference","this","props","columns","pixelSize","canvasBorderSize","document","body","clientWidth","dispatch","i","rows","newColumnIndex","defaultPixelColor","newRowCount","rowDifference","newPixelSize","hide","checked","className","onChange","onKeyDown","preventDefault","max","min","htmlFor","editorColor","hidePixelGrid","React","Component","connect","state","pixels","Pixel","handlePixelClick","pixelStyle","width","height","background","borderRight","borderBottom","buttons","addPaletteColor","removePaletteColor","style","onMouseDown","onMouseOver","onContextMenu","Canvas","length","maxWidth","canvasStyle","map","key","Color","handleColorClick","colorStyle","colorPalette","ColorPalette","x","Controls","handleNewClick","App","Boolean","window","location","hostname","match","initialState","rootReducer","action","slice","colorInPalette","some","colouredPixels","filter","newPixel","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","throttle","stringify","setItem","console","log","saveState","getState","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d783f5ab.chunk.js","sourcesContent":["\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { \r\n    UPDATE_PIXEL_SIZE,\r\n    UPDATE_COLUMNS,\r\n    UPDATE_ROWS,\r\n    ADD_PIXEL,\r\n    DELETE_PIXEL,\r\n    UPDATE_PIXEL,\r\n    HIDE_PIXEL_GRID,\r\n    UPDATE_EDITOR_COLOR,\r\n    ADD_PALETTE_COLOR,\r\n    REMOVE_PALETTE_COLOR,\r\n    CLEAR_CANVAS\r\n} from \"../constants/action-types\";\r\n\r\nexport function updatePixelSize(pixelSize) {\r\n    return { \r\n        type: UPDATE_PIXEL_SIZE, \r\n        pixelSize\r\n    };\r\n}\r\n\r\nexport function updateColumns(columns) {\r\n    return { \r\n        type: UPDATE_COLUMNS, \r\n        columns \r\n    };\r\n}\r\n\r\nexport function updateRows(rows) {\r\n    return { \r\n        type: UPDATE_ROWS,\r\n        rows\r\n    };\r\n}\r\n\r\nexport function addPixel(pixel) {\r\n    return { \r\n        type: ADD_PIXEL, \r\n        id: uuid(),\r\n        color: pixel.color,\r\n        index: pixel.index\r\n    };\r\n}\r\n\r\nexport function deletePixel(pixel) {\r\n    return { \r\n        type: DELETE_PIXEL,\r\n        index: pixel && pixel.index ? pixel.index : null\r\n    };\r\n}\r\n\r\nexport function updatePixel(pixel){\r\n    return {\r\n        type: UPDATE_PIXEL,\r\n        id: pixel.id,\r\n        color: pixel.color\r\n    }\r\n}\r\n\r\nexport function hidePixelGrid(hide){\r\n    return {\r\n        type: HIDE_PIXEL_GRID,\r\n        hide\r\n    }\r\n}\r\n\r\nexport function updateEditorColor(color){\r\n    return {\r\n        type: UPDATE_EDITOR_COLOR,\r\n        color\r\n    }\r\n}\r\n\r\nexport function addPaletteColor(color){\r\n    return { \r\n        type: ADD_PALETTE_COLOR, \r\n        id: uuid(),\r\n        color\r\n    };\r\n}\r\n\r\nexport function removePaletteColor(color){\r\n    return { \r\n        type: REMOVE_PALETTE_COLOR,\r\n        color\r\n    };\r\n}\r\n\r\nexport function clearCanvas(){\r\n    return {\r\n        type: CLEAR_CANVAS\r\n    }\r\n}","\r\nexport const UPDATE_PIXEL_SIZE = \"UPDATE_PIXEL_SIZE\";\r\nexport const UPDATE_COLUMNS = \"UPDATE_COLUMNS\";\r\nexport const UPDATE_ROWS = \"UPDATE_ROWS\";\r\nexport const ADD_PIXEL = \"ADD_PIXEL\";\r\nexport const DELETE_PIXEL = \"DELETE_PIXEL\";\r\nexport const UPDATE_PIXEL = \"UPDATE_PIXEL\";\r\nexport const HIDE_PIXEL_GRID = \"HIDE_PIXEL_GRID\";\r\nexport const UPDATE_EDITOR_COLOR = \"UPDATE_EDITOR_COLOR\";\r\nexport const ADD_PALETTE_COLOR = \"ADD_PALETTE_COLOR\";\r\nexport const REMOVE_PALETTE_COLOR = \"REMOVE_PALETTE_COLOR\";\r\nexport const CLEAR_CANVAS = \"CLEAR_CANVAS\";","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { \r\n    updateColumns,\r\n    updateRows, \r\n    updatePixelSize, \r\n    addPixel, \r\n    deletePixel, \r\n    hidePixelGrid,\r\n    updateEditorColor\r\n} from \"../actions\"\r\n\r\nclass Options extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.handleColumnChange = this.handleColumnChange.bind(this);\r\n        this.handleRowChange = this.handleRowChange.bind(this);\r\n        this.handlePixelSizeChange = this.handlePixelSizeChange.bind(this);\r\n        this.handleHidePixelGrid = this.handleHidePixelGrid.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this);\r\n    }\r\n\r\n    handleColumnChange(event){\r\n\r\n        let newColumnCount = event.target.value;\r\n        let columnDifference = newColumnCount - this.props.columns;\r\n\r\n        let canvasWidth = this.props.pixelSize * newColumnCount + this.props.canvasBorderSize;\r\n        let windowWidth = document.body.clientWidth;\r\n\r\n        if(canvasWidth >= windowWidth)\r\n            return false;\r\n\r\n        this.props.dispatch(updateColumns(newColumnCount));\r\n\r\n        if(columnDifference > 0){\r\n            for(let i = 1; i <= columnDifference * this.props.rows; i++){\r\n                let newColumnIndex = i * this.props.columns + i - 1;\r\n                this.props.dispatch(addPixel({ \r\n                    index: newColumnIndex, \r\n                    color: this.props.defaultPixelColor\r\n                }));\r\n            }\r\n        } else if(columnDifference < 0){\r\n            for(let i = 0; i < -columnDifference * this.props.rows; i++){\r\n                this.props.dispatch(deletePixel({ \r\n                    index: i * this.props.columns - i\r\n                }));\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    handleRowChange(event){\r\n\r\n        let newRowCount = event.target.value;\r\n        let rowDifference = newRowCount - this.props.rows;\r\n\r\n        this.props.dispatch(updateRows(newRowCount));\r\n\r\n        if(rowDifference > 0){\r\n            for(let i = 0; i < rowDifference * this.props.columns; i++){\r\n                this.props.dispatch(addPixel({ color: this.props.defaultPixelColor }));\r\n            }\r\n        } else if(rowDifference < 0){\r\n            for(let i = 0; i > rowDifference * this.props.columns; i--){\r\n                this.props.dispatch(deletePixel());\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    handlePixelSizeChange(event){\r\n\r\n        let newPixelSize = event.target.value;\r\n        let canvasWidth = newPixelSize * this.props.columns + this.props.canvasBorderSize;\r\n        let windowWidth = document.body.clientWidth;\r\n\r\n        if(canvasWidth >= windowWidth)\r\n            return false;\r\n\r\n        this.props.dispatch(updatePixelSize(newPixelSize));\r\n    }\r\n\r\n    handleHidePixelGrid(event){\r\n        this.props.dispatch(hidePixelGrid(event.target.checked));\r\n    }\r\n\r\n    handleColorChange(event){\r\n        this.props.dispatch(updateEditorColor(event.target.value));\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"toolbar\">\r\n                <div className=\"toolbar-option\">\r\n                    <label>Canvas:</label>\r\n                    <input \r\n                        type=\"number\"\r\n                        value={this.props.columns}\r\n                        onChange={this.handleColumnChange}\r\n                        onKeyDown={(event) => event.preventDefault()}\r\n                        max=\"50\"\r\n                        min=\"2\"\r\n                    />\r\n                    x\r\n                    <input \r\n                        type=\"number\"\r\n                        value={this.props.rows}\r\n                        onChange={this.handleRowChange}\r\n                        onKeyDown={(event) => event.preventDefault()}\r\n                        max=\"50\"\r\n                        min=\"2\"\r\n                    />\r\n                </div>\r\n                <div className=\"toolbar-option\">\r\n                    <label htmlFor=\"color-picker\">Color:</label>\r\n                    <input \r\n                        id=\"color-picker\"\r\n                        type=\"color\"\r\n                        value={this.props.editorColor}\r\n                        onChange={this.handleColorChange}\r\n                    />\r\n                </div>\r\n                <div className=\"toolbar-option\">\r\n                    <label htmlFor=\"hide-pixel-grid\">Hide pixel grid:</label>\r\n                    <input \r\n                        id=\"hide-pixel-grid\"\r\n                        type=\"checkbox\"\r\n                        checked={this.props.hidePixelGrid}\r\n                        onChange={this.handleHidePixelGrid}\r\n                    />\r\n                </div>\r\n                <div className=\"toolbar-option\">\r\n                    <label>Zoom:</label>\r\n                    <input \r\n                        type=\"range\"\r\n                        value={this.props.pixelSize}\r\n                        onChange={this.handlePixelSizeChange}\r\n                        min=\"1\"\r\n                        max=\"35\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n  \r\nconst mapStateToProps = state => {\r\n    return { \r\n        pixelSize: state.pixelSize,\r\n        rows: state.rows,\r\n        columns: state.columns,\r\n        pixels: state.pixels,\r\n        hidePixelGrid: state.hidePixelGrid,\r\n        editorColor: state.editorColor,\r\n        defaultPixelColor: state.defaultPixelColor,\r\n        canvasBorderSize: state.canvasBorderSize\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Options);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { \r\n    updatePixel,\r\n    addPaletteColor,\r\n    removePaletteColor\r\n} from \"../actions\"\r\n\r\nclass Pixel extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.handlePixelClick = this.handlePixelClick.bind(this);\r\n    }\r\n\r\n    pixelStyle(){\r\n        let pixelStyle = {\r\n            width: this.props.pixelSize + 'px',\r\n            height: this.props.pixelSize + 'px',\r\n            background: this.props.color,\r\n        }\r\n        \r\n        if(this.props.hidePixelGrid){\r\n            pixelStyle.borderRight = 0;\r\n            pixelStyle.borderBottom = 0;\r\n        }\r\n\r\n        return pixelStyle;\r\n    }\r\n\r\n    handlePixelClick(event, id, color){\r\n        event.preventDefault();\r\n        if(event.buttons === 1){\r\n            this.props.dispatch(updatePixel({ \r\n                id, \r\n                color: this.props.editorColor\r\n            }));\r\n            this.props.dispatch(addPaletteColor(this.props.editorColor));\r\n        } else if(event.buttons === 2){\r\n            this.props.dispatch(updatePixel({ \r\n                id, \r\n                color: this.props.defaultPixelColor\r\n            }));\r\n            this.props.dispatch(removePaletteColor(color));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render(){\r\n        return <div \r\n                className=\"pixel\" \r\n                style={this.pixelStyle()}\r\n                onMouseDown={(event) => this.handlePixelClick(event, this.props.id, this.props.color)}\r\n                onMouseOver={(event) => this.handlePixelClick(event, this.props.id, this.props.color)}\r\n                onContextMenu={(event) => event.preventDefault()}\r\n    ></div>;\r\n    };\r\n}\r\n    \r\nconst mapStateToProps = state => {\r\n    return { \r\n        pixelSize: state.pixelSize,\r\n        hidePixelGrid: state.hidePixelGrid,\r\n        editorColor: state.editorColor,\r\n        defaultPixelColor: state.defaultPixelColor\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Pixel);","\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Pixel from \"./Pixel\";\r\nimport { addPixel } from \"../actions\";\r\n\r\nclass Canvas extends React.Component {\r\n\r\n    componentDidMount() {\r\n        if(this.props.pixels.length === 0){\r\n            for(let i = 0; i < this.props.columns * this.props.rows; i++){\r\n                this.props.dispatch(addPixel({ color: this.props.defaultPixelColor }));\r\n            }\r\n        }\r\n    }\r\n\r\n    canvasStyle(){\r\n        let canvasWidth = this.props.pixelSize * this.props.columns + this.props.canvasBorderSize;\r\n        return {\r\n            maxWidth: canvasWidth + 'px',\r\n        }\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div \r\n                className=\"pixels\" \r\n                style={this.canvasStyle()}\r\n            >\r\n                {this.props.pixels.map(pixel => (\r\n                    <Pixel key={pixel.id} id={pixel.id} color={pixel.color} />\r\n                ))}\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        rows: state.rows,\r\n        columns: state.columns,\r\n        pixelSize: state.pixelSize,\r\n        pixels: state.pixels,\r\n        defaultPixelColor: state.defaultPixelColor,\r\n        canvasBorderSize: state.canvasBorderSize\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Canvas);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateEditorColor } from \"../actions\";\r\n\r\nclass Color extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.handleColorClick = this.handleColorClick.bind(this);\r\n    }\r\n\r\n    handleColorClick(event, color){\r\n        event.preventDefault();\r\n        this.props.dispatch(updateEditorColor(color));\r\n    }\r\n\r\n    colorStyle(color){\r\n        return {\r\n            background: color,\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div \r\n                className=\"color\" \r\n                style={this.colorStyle(this.props.color)}\r\n                onMouseDown={(event) => this.handleColorClick(event, this.props.color)}\r\n            ></div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        colorPalette: state.colorPalette,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Color);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Color from \"./Color\";\r\n\r\nclass ColorPalette extends React.Component {\r\n\r\n    render(){\r\n        if(this.props.colorPalette.length > 0){\r\n            return (\r\n                <div className=\"color-palette\">\r\n                    <h4>Color Palette</h4>\r\n                    <div className=\"colors\">\r\n                        {this.props.colorPalette.map(x => (\r\n                            <Color key={x.id} color={x.color} />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        colorPalette: state.colorPalette,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ColorPalette);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { \r\n    clearCanvas\r\n} from \"../actions\"\r\n\r\nclass Controls extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.handleNewClick = this.handleNewClick.bind(this);\r\n    }\r\n\r\n    handleNewClick(){\r\n        this.props.dispatch(clearCanvas());\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"controls\">\r\n                <button className=\"control-button\" onMouseDown={(event) => this.handleNewClick()}>New</button>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default connect()(Controls);","import React from 'react';\nimport Options from \"./js/components/Options\";\nimport Canvas from \"./js/components/Canvas\";\nimport ColorPalette from \"./js/components/ColorPalette\";\nimport Controls from \"./js/components/Controls\";\n\nfunction App(){\n  return (  \n    <div className=\"App\">\n      <h2>Pixel Painter</h2>\n      <Options />\n      <Canvas />\n      <ColorPalette />\n      <Controls />\n    </div>\n  );\n};\n\nexport default (App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport { \r\n    UPDATE_PIXEL_SIZE,\r\n    UPDATE_COLUMNS,\r\n    UPDATE_ROWS,\r\n    ADD_PIXEL,\r\n    DELETE_PIXEL,\r\n    UPDATE_PIXEL,\r\n    HIDE_PIXEL_GRID,\r\n    UPDATE_EDITOR_COLOR,\r\n    ADD_PALETTE_COLOR,\r\n    REMOVE_PALETTE_COLOR,\r\n    CLEAR_CANVAS\r\n} from \"../constants/action-types\";\r\n\r\nconst initialState = {\r\n    pixelSize: 16,\r\n    columns: 24,\r\n    rows: 24,\r\n    pixels: [],\r\n    hidePixelGrid: false,\r\n    editorColor: '#11b6df',\r\n    defaultPixelColor: 'transparent',\r\n    colorPalette: [],\r\n    canvasBorderSize: 2,\r\n}\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n\r\n    if(action.type === UPDATE_PIXEL_SIZE){\r\n        return {\r\n            ...state,\r\n            pixelSize: action.pixelSize\r\n        }\r\n    }\r\n\r\n    if(action.type === UPDATE_COLUMNS){\r\n        return {\r\n            ...state,\r\n            columns: action.columns\r\n        }\r\n    }\r\n\r\n    if(action.type === UPDATE_ROWS){\r\n        return {\r\n            ...state,\r\n            rows: action.rows\r\n        }\r\n    }\r\n\r\n    if(action.type === ADD_PIXEL){\r\n        if(action.index != null){\r\n            // Add pixel at certain array index\r\n            return {\r\n                ...state,\r\n                pixels: [\r\n                    ...state.pixels.slice(0, action.index),\r\n                    {\r\n                        id: action.id,\r\n                        color: action.color,\r\n                    },\r\n                    ...state.pixels.slice(action.index),\r\n                ],\r\n            }\r\n        } else {\r\n            // Add pixel to the end of array\r\n            return {\r\n                ...state,\r\n                pixels: [\r\n                    ...state.pixels,\r\n                    {\r\n                        id: action.id,\r\n                        color: action.color,\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    if(action.type === DELETE_PIXEL){\r\n        if(action.index != null){\r\n            // Delete pixel at certain array index\r\n            return {\r\n                ...state,\r\n                pixels: [\r\n                    ...state.pixels.slice(0, action.index),\r\n                    ...state.pixels.slice(action.index + 1)\r\n                ],\r\n            }\r\n        } else {\r\n            // Delete pixel from end of array\r\n            return {\r\n                ...state,\r\n                pixels: state.pixels.slice(0, -1),\r\n            }\r\n        }\r\n    }\r\n\r\n    if(action.type === UPDATE_PIXEL){\r\n        return {\r\n            ...state,\r\n            pixels: state.pixels.map(pixel => \r\n                pixel.id === action.id ? { ...pixel, color: action.color } : pixel\r\n            ),\r\n        };\r\n    }\r\n\r\n    if(action.type === HIDE_PIXEL_GRID){\r\n        return {\r\n            ...state,\r\n            hidePixelGrid: action.hide,\r\n        }\r\n    }\r\n\r\n    if(action.type === UPDATE_EDITOR_COLOR){\r\n        return {\r\n            ...state,\r\n            editorColor: action.color,\r\n        }\r\n    }\r\n\r\n    if(action.type === ADD_PALETTE_COLOR){\r\n        let colorInPalette = state.colorPalette.some(x => x.color === action.color);\r\n        if(!colorInPalette){\r\n            return {\r\n                ...state,\r\n                colorPalette: [\r\n                    ...state.colorPalette,\r\n                    {\r\n                        id: action.id,\r\n                        color: action.color,\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    if(action.type === REMOVE_PALETTE_COLOR){\r\n        let colouredPixels = state.pixels.filter(x => x.color === action.color);\r\n        if(colouredPixels.length === 0){\r\n            return {\r\n                ...state,\r\n                colorPalette: state.colorPalette.filter(x => x.color !== action.color)\r\n            }\r\n        }\r\n    }    \r\n\r\n    if(action.type === CLEAR_CANVAS){\r\n        return {\r\n            ...state,\r\n            pixels: state.pixels.map(x => {\r\n                let newPixel = x;\r\n                newPixel.color = state.defaultPixelColor;\r\n                return newPixel;\r\n            }),\r\n            colorPalette: [],\r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default rootReducer;","\r\nimport { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nimport { saveState, loadState } from \"../common/localStorage\";\r\nimport throttle from \"lodash/throttle\";\r\n\r\nconst persistedState = loadState();\r\nconst store = createStore(rootReducer, persistedState);\r\n\r\nstore.subscribe(throttle(() => {\r\n    saveState(store.getState());\r\n}), 1000);\r\n\r\nexport default store;","export const loadState = () => {\r\n    try{\r\n        const serializedState = localStorage.getItem('state');\r\n        if(serializedState === null){\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch (err) {\r\n        console.log('Error saving state: ' + err);\r\n    }\r\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from \"./js/store/index\";\nimport { Provider } from \"react-redux\";\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}